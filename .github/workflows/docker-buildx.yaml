name: Docker Buildx

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string

      context:
        required: true
        type: string

      platform:
        required: true
        type: string

      build_args:
        required: false
        type: string

      manifest_from_image:
        required: false
        type: string

jobs:
  docker-buildx:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ inputs.image_name }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          platforms: ${{ inputs.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: ${{ inputs.context }}
          build-args: ${{ inputs.build_args }}
          pull: true
          push: ${{ github.event_name != 'pull_request' }}

      - name: Copy image manifest
        if: github.event_name != 'pull_request' && inputs.manifest_from_image != ''
        shell: bash
        run: |
          set -e
          set -o pipefail

          MANIFEST_FROM_IMAGE=${{ inputs.manifest_from_image }}
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ inputs.image_name }}:${{ steps.meta.outputs.version }}

          PLATFORM=$(docker buildx imagetools inspect --raw $MANIFEST_FROM_IMAGE | jq -cr '.manifests[] | select(.platform.os=="windows") | .platform')
          ARCH=$(echo $PLATFORM | jq -r ".architecture")
          OS_VERSION=$(echo $PLATFORM | jq -r '."os.version"')

          docker buildx imagetools inspect --raw $IMAGE | jq ".manifests[] | select(.platform.os==\"windows\") | .platform.\"os.version\"=\"${OS_VERSION}\" | .platform.architecture=\"${ARCH}\"" > manifest.json
          docker buildx imagetools create -f manifest.json -t $IMAGE
