---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineHealthCheck
metadata:
  name: {{ cluster_name }}-control-plane-mhc
spec:
  clusterName: {{ cluster_name }}
  nodeStartupTimeout: 10m
  selector:
    matchLabels:
      cluster.x-k8s.io/control-plane: ""
  unhealthyConditions:
    - type: Ready
      status: Unknown
      timeout: 5m
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: {{ cluster_name }}-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "true"
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
          cluster-name: {{ cluster_name }}
{%- if flannel_mode == "host-gw" %}
          configure-cloud-routes: "true"
{%- else %}
          configure-cloud-routes: "false"
{%- endif %}
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
      - device: ephemeral0.1
        filesystem: ext4
        label: ephemeral0
        replaceFS: ntfs
      partitions:
      - device: /dev/disk/azure/scsi1/lun0
        layout: true
        overwrite: false
        tableType: gpt
    files:
{%- if flannel_mode == "overlay" %}
    - content: |
        network:
          version: 2
          ethernets:
            eth0:
              mtu: 1400
      owner: root:root
      path: /etc/netplan/60-eth0.yaml
      permissions: "0644"
{%- endif %}
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: {{ cluster_name }}-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
{%- raw %}
        name: '{{ ds.meta_data["local_hostname"] }}'
{%- endraw %}
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
{%- raw %}
        name: '{{ ds.meta_data["local_hostname"] }}'
{%- endraw %}
    mounts:
    - - LABEL=etcd_disk
      - /var/lib/etcddisk
    preKubeadmCommands:
    - curl -Lo /run/kubeadm/kubeadm-bootstrap.sh http://{{ bootstrap_vm_address }}/scripts/kubeadm-bootstrap.sh
    - bash /run/kubeadm/kubeadm-bootstrap.sh http://{{ bootstrap_vm_address }} {{ ci_version }} {{ k8s_bins }}
{%- if flannel_mode == "overlay" %}
    postKubeadmCommands:
    - netplan apply
{%- endif %}
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: {{ cluster_name }}-control-plane
  version: {{ ci_version }}
  replicas: 1
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: {{ cluster_name }}-control-plane
  namespace: default
spec:
  template:
    spec:
      dataDisks:
      - diskSizeGB: 128
        lun: 0
        nameSuffix: etcddisk
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: {{ azure_ssh_public_key_b64 }}
      vmSize: {{ master_vm_size }}
{%- if flannel_mode == "host-gw" %}
      enableIPForwarding: true
{%- endif %}
{%- if k8s_bins %}
      image:
        marketplace:
          publisher: cncf-upstream
          offer: capi
          sku: k8s-1dot23dot0-ubuntu-2004
          version: latest
{%- endif %}
